Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    IGNORE
    LINECONT
    NEWLINE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expexponent -> NUMBER
Rule 3     expexponent -> MINUS NUMBER
Rule 4     num -> NUMBER
Rule 5     num -> MINUS NUMBER
Rule 6     expression -> expression PLUS expression
Rule 7     expression -> expression MINUS expression
Rule 8     expression -> expression TIMES expression
Rule 9     expression -> expression DIVIDE expression
Rule 10    expression -> expression EXPONENT expexponent
Rule 11    expression -> LPAREN expression RPAREN
Rule 12    expression -> num

Terminals, with rules where they appear

COMMENT              : 
DIVIDE               : 9
EXPONENT             : 10
IGNORE               : 
LINECONT             : 
LPAREN               : 11
MINUS                : 3 5 7
NEWLINE              : 
NUMBER               : 2 3 4 5
PLUS                 : 6
RPAREN               : 11
TIMES                : 8
error                : 

Nonterminals, with rules where they appear

expexponent          : 10
expression           : 1 6 6 7 7 8 8 9 9 10 11
num                  : 12
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression EXPONENT expexponent
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . num
    (4) num -> . NUMBER
    (5) num -> . MINUS NUMBER

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    MINUS           shift and go to state 3

    statement                      shift and go to state 1
    expression                     shift and go to state 2
    num                            shift and go to state 5

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . EXPONENT expexponent

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    EXPONENT        shift and go to state 11


state 3

    (5) num -> MINUS . NUMBER

    NUMBER          shift and go to state 12


state 4

    (11) expression -> LPAREN . expression RPAREN
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression EXPONENT expexponent
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . num
    (4) num -> . NUMBER
    (5) num -> . MINUS NUMBER

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    MINUS           shift and go to state 3

    expression                     shift and go to state 13
    num                            shift and go to state 5

state 5

    (12) expression -> num .

    PLUS            reduce using rule 12 (expression -> num .)
    MINUS           reduce using rule 12 (expression -> num .)
    TIMES           reduce using rule 12 (expression -> num .)
    DIVIDE          reduce using rule 12 (expression -> num .)
    EXPONENT        reduce using rule 12 (expression -> num .)
    $end            reduce using rule 12 (expression -> num .)
    RPAREN          reduce using rule 12 (expression -> num .)


state 6

    (4) num -> NUMBER .

    PLUS            reduce using rule 4 (num -> NUMBER .)
    MINUS           reduce using rule 4 (num -> NUMBER .)
    TIMES           reduce using rule 4 (num -> NUMBER .)
    DIVIDE          reduce using rule 4 (num -> NUMBER .)
    EXPONENT        reduce using rule 4 (num -> NUMBER .)
    $end            reduce using rule 4 (num -> NUMBER .)
    RPAREN          reduce using rule 4 (num -> NUMBER .)


state 7

    (6) expression -> expression PLUS . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression EXPONENT expexponent
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . num
    (4) num -> . NUMBER
    (5) num -> . MINUS NUMBER

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    MINUS           shift and go to state 3

    expression                     shift and go to state 14
    num                            shift and go to state 5

state 8

    (7) expression -> expression MINUS . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression EXPONENT expexponent
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . num
    (4) num -> . NUMBER
    (5) num -> . MINUS NUMBER

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    MINUS           shift and go to state 3

    expression                     shift and go to state 15
    num                            shift and go to state 5

state 9

    (8) expression -> expression TIMES . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression EXPONENT expexponent
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . num
    (4) num -> . NUMBER
    (5) num -> . MINUS NUMBER

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    MINUS           shift and go to state 3

    expression                     shift and go to state 16
    num                            shift and go to state 5

state 10

    (9) expression -> expression DIVIDE . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression EXPONENT expexponent
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . num
    (4) num -> . NUMBER
    (5) num -> . MINUS NUMBER

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    MINUS           shift and go to state 3

    expression                     shift and go to state 17
    num                            shift and go to state 5

state 11

    (10) expression -> expression EXPONENT . expexponent
    (2) expexponent -> . NUMBER
    (3) expexponent -> . MINUS NUMBER

    NUMBER          shift and go to state 19
    MINUS           shift and go to state 20

    expexponent                    shift and go to state 18

state 12

    (5) num -> MINUS NUMBER .

    PLUS            reduce using rule 5 (num -> MINUS NUMBER .)
    MINUS           reduce using rule 5 (num -> MINUS NUMBER .)
    TIMES           reduce using rule 5 (num -> MINUS NUMBER .)
    DIVIDE          reduce using rule 5 (num -> MINUS NUMBER .)
    EXPONENT        reduce using rule 5 (num -> MINUS NUMBER .)
    $end            reduce using rule 5 (num -> MINUS NUMBER .)
    RPAREN          reduce using rule 5 (num -> MINUS NUMBER .)


state 13

    (11) expression -> LPAREN expression . RPAREN
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . EXPONENT expexponent

    RPAREN          shift and go to state 21
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    EXPONENT        shift and go to state 11


state 14

    (6) expression -> expression PLUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . EXPONENT expexponent

    PLUS            reduce using rule 6 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 6 (expression -> expression PLUS expression .)
    $end            reduce using rule 6 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    EXPONENT        shift and go to state 11

  ! TIMES           [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! EXPONENT        [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]


state 15

    (7) expression -> expression MINUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . EXPONENT expexponent

    PLUS            reduce using rule 7 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 7 (expression -> expression MINUS expression .)
    $end            reduce using rule 7 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 7 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    EXPONENT        shift and go to state 11

  ! TIMES           [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! EXPONENT        [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]


state 16

    (8) expression -> expression TIMES expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . EXPONENT expexponent

    PLUS            reduce using rule 8 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 8 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 8 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 8 (expression -> expression TIMES expression .)
    $end            reduce using rule 8 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 8 (expression -> expression TIMES expression .)
    EXPONENT        shift and go to state 11

  ! EXPONENT        [ reduce using rule 8 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]


state 17

    (9) expression -> expression DIVIDE expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . EXPONENT expexponent

    PLUS            reduce using rule 9 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 9 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 9 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 9 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 9 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 9 (expression -> expression DIVIDE expression .)
    EXPONENT        shift and go to state 11

  ! EXPONENT        [ reduce using rule 9 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]


state 18

    (10) expression -> expression EXPONENT expexponent .

    PLUS            reduce using rule 10 (expression -> expression EXPONENT expexponent .)
    MINUS           reduce using rule 10 (expression -> expression EXPONENT expexponent .)
    TIMES           reduce using rule 10 (expression -> expression EXPONENT expexponent .)
    DIVIDE          reduce using rule 10 (expression -> expression EXPONENT expexponent .)
    EXPONENT        reduce using rule 10 (expression -> expression EXPONENT expexponent .)
    $end            reduce using rule 10 (expression -> expression EXPONENT expexponent .)
    RPAREN          reduce using rule 10 (expression -> expression EXPONENT expexponent .)


state 19

    (2) expexponent -> NUMBER .

    PLUS            reduce using rule 2 (expexponent -> NUMBER .)
    MINUS           reduce using rule 2 (expexponent -> NUMBER .)
    TIMES           reduce using rule 2 (expexponent -> NUMBER .)
    DIVIDE          reduce using rule 2 (expexponent -> NUMBER .)
    EXPONENT        reduce using rule 2 (expexponent -> NUMBER .)
    $end            reduce using rule 2 (expexponent -> NUMBER .)
    RPAREN          reduce using rule 2 (expexponent -> NUMBER .)


state 20

    (3) expexponent -> MINUS . NUMBER

    NUMBER          shift and go to state 22


state 21

    (11) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    EXPONENT        reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 11 (expression -> LPAREN expression RPAREN .)


state 22

    (3) expexponent -> MINUS NUMBER .

    PLUS            reduce using rule 3 (expexponent -> MINUS NUMBER .)
    MINUS           reduce using rule 3 (expexponent -> MINUS NUMBER .)
    TIMES           reduce using rule 3 (expexponent -> MINUS NUMBER .)
    DIVIDE          reduce using rule 3 (expexponent -> MINUS NUMBER .)
    EXPONENT        reduce using rule 3 (expexponent -> MINUS NUMBER .)
    $end            reduce using rule 3 (expexponent -> MINUS NUMBER .)
    RPAREN          reduce using rule 3 (expexponent -> MINUS NUMBER .)

