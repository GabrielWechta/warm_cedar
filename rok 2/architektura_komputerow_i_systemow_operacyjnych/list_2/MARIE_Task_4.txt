/Works with fixing range, i.e. input [X,Y] when X>Y,
/Also with X = 1 

INPUT
Store X
INPUT
Store Y
Jns fix_range 
range, 	Load X /[X,Y]
	Subt Y
    Subt ONE /substracting 1 in order to also check Y
	Skipcond 000
	Halt
	
	Jns bef_for /basic "is_prime" checking loop

	Load X /X++
	Add ONE
	Store X
	
	Jump range

bef_for, 	HEX 	000
	Load TWO
	Store divisor /divisor = 2
	Load X
	Store number /number = X
    Load ZERO
    Store count	/count = 0

cond,Load number /substract until number is smaller then 0
	Subt divisor
	Store number
	Skipcond 000
	Jump cond
    
    Load X /check if X == 2, if does go right to printing
    Subt TWO
    Skipcond 800
    Jump end	
	
	Load number /if what's left after substracting + divisor is bigger then number isn't prime
	Add divisor
	Skipcond 800
	Jns not_p
	
	Load divisor /divisor++
	Add ONE
	Store divisor
    
	Load X /if divisor >= number then jump to end else jump to cond
	Store number
	Subt divisor
	Skipcond 400
	Jump cond
	
	Jump end

end, 	Load count /if count == 0 jmp to print
	Skipcond 800
	Jns print

	JumpI bef_for

not_p, 	HEX 	000 / count++
	Load count 
	Add ONE
	Store count
	JumpI not_p

print, 	HEX 	000 /simply prints X
	Load X
	Output
	JumpI print
    
fix_range, HEX	000/ if X > Y -> range = [Y,X]
	Load X
    Subt Y
    Skipcond 000
    Jns change
    
    Load X 
    Subt ONE
    Skipcond 800
    Jns h_one
    
    JumpI fix_range

change, HEX 000 /helps fix_range
        Load X
        Store temp
        Load Y
        Store X
        Load temp 
        Store Y
    	
        JumpI change
        
h_one, HEX 000 /handles situation with X = 1
		Load X
        Add ONE
        Store X
        JumpI h_one
    
/vairables
ZERO, DEC 0
ONE, DEC 1
TWO, DEC 2
X, DEC 0
Y, DEC 0
count, DEC 0
divisor, DEC 2
number, DEC 0
temp, DEC 0	
