poly.adb:7:33: medium: loop invariant might not be preserved by an arbitrary iteration, cannot prove Z = (X ** (I - A'First)) * Y (e.g. when A = (1 => -1, others => 0) and A'First = 0 and A'Last = 1 and I = 0 and X = 0 and Y = -1 and Z = 0)[#7]
poly.adb:7:40: medium: overflow check might fail (e.g. when A = (others => 0) and A'First = 0 and A'Last = 1 and I = 1 and X = 0) [possible explanation: precondition of subprogram at poly.ads:5 should mention X][#5]
poly.adb:7:58: medium: overflow check might fail (e.g. when A = (1 => -2, others => 0) and A'First = 0 and A'Last = 1 and I = 0 and X = 0 and Y = -2)[#6]
poly.adb:8:17: medium: overflow check might fail (e.g. when A = (others => -2) and A'First = 0 and A'Last = 1 and I = 1 and X = 0 and Z = -6)[#2]
poly.adb:8:24: medium: overflow check might fail (e.g. when A = (others => -2) and A'First = 0 and A'Last = 1 and I = 0 and X = 0) [possible explanation: precondition of subprogram at poly.ads:5 should mention X][#1]
poly.adb:8:29: medium: overflow check might fail (e.g. when A = (others => 0) and A'First = 0 and A'Last = 1 and I = 0 and X = 0) [possible explanation: precondition of subprogram at poly.ads:5 should mention X][#0]
poly.adb:9:17: medium: overflow check might fail (e.g. when X = -2 and Y = 2)[#3]
poly.adb:9:21: medium: overflow check might fail (e.g. when A = (others => -2147483649) and A'First = 0 and A'Last = 1 and I = 1 and X = 0 and Y = 0)[#4]
poly.adb:14:22: medium: assertion might fail, cannot prove Y = Z (e.g. when Y = -1 and Z = 0)[#8]
