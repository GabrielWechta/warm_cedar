1. ####################################################################################################
-z execstack : Disables Executable Stack
Oczywiście głupi pomysł, flaga została ponieważ są programy (pradawne), które wciąż go używają.

-fno-stack-protector : Disables Stack Canaries
Canaries jak te w kopalniach, są to ofiarne wartości pomiędzy bufferami i ważnymi danymi. Jeżeli canaries są naruszone, co najpewniej również oznacza, że ważne dane również zostały naruszone i program od razu się zatrzymuje. Czasami są to takie wartości jak \x0a czy \x0b czyli odpowiednio "enter" i "vertical enter", ciężkie do przesłania.

ASLR - shuffles blocks of memory, so no longer code is at constant place.

jak pokazać:
$ gcc login.c -o login -fno-stack-protector -z execstack -g
$ gdb login.c

modyfikacja authenticated:
(gdb) b login
(gdb) run aaaaaaaaaab
(gdb) n
...
(gdb) p secret 
(gdb) p authenticated

modyfikacja secret:
(gdb) b login
(gdb) run aaaaaaaaaabbbbc
(gdb) n
...
(gdb) p secret 
(gdb) p authenticated

2. ####################################################################################################
-m32 is necessary, too, on 64-bit systems. The int $0x80 32-bit ABI doesn't work with 64-bit addresses like .rodata in a PIE executable. Also, the machine code was assembled for 32-bit. It happens that the same sequence of bytes would decode to equivalent instructions in 64-bit mode but that's not always the case.

int *ret; 
- wrzuca zmienną na stos, tuż pod argumentami main'a.

ret = (int *)&ret + 2; 
- teraz ret wskazuje dwa inty powyżej starego ret, czyli tam gdzie jest adres powrotu po wyjściu z maina.

(*ret) = (int)shellcode;
- adres powrotu jest ustawiony na adres początku shellcode. Tym samym shellcode będzie wykonany po wyjściu z maina.

jak pokazać:
$ gdb -x gdb_script ./smartnot 

Instrukcja call działa identycznie do instrukcji jmp z tą różnicą, że przed przeskokiem układa na stosie bieżące wartości rejestrów EIP oraz ew. CS tak aby później było można wrócić do miejsca gdzie wykonany był skok przy użyciu którejś instrukcji z rodziny ret. Istnieją dwie główne odmiany instrukcji call:
